// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package cluster_icache_ctrl_reg_pkg;

  // Param list
  parameter int NumCores = 8;
  parameter int NumL0Events = 7;
  parameter int NumL1Events = 6;
  parameter int NumAvailableCounters = 62;

  // Address widths within the block
  parameter int BlockAw = 9;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    logic        q;
  } cluster_icache_ctrl_reg2hw_enable_reg_t;

  typedef struct packed {
    logic        q;
    logic        qe;
  } cluster_icache_ctrl_reg2hw_flush_reg_t;

  typedef struct packed {
    logic        q;
    logic        qe;
  } cluster_icache_ctrl_reg2hw_flush_l1_only_reg_t;

  typedef struct packed {
    logic [7:0]  q;
    logic        qe;
  } cluster_icache_ctrl_reg2hw_sel_flush_icache_reg_t;

  typedef struct packed {
    logic        q;
    logic        qe;
  } cluster_icache_ctrl_reg2hw_clear_counters_reg_t;

  typedef struct packed {
    logic        q;
  } cluster_icache_ctrl_reg2hw_enable_counters_reg_t;

  typedef struct packed {
    logic        q;
  } cluster_icache_ctrl_reg2hw_enable_prefetch_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } cluster_icache_ctrl_reg2hw_counters_mreg_t;

  typedef struct packed {
    logic        d;
  } cluster_icache_ctrl_hw2reg_flush_reg_t;

  typedef struct packed {
    logic        d;
  } cluster_icache_ctrl_hw2reg_flush_l1_only_reg_t;

  typedef struct packed {
    logic [7:0]  d;
  } cluster_icache_ctrl_hw2reg_sel_flush_icache_reg_t;

  typedef struct packed {
    logic        d;
  } cluster_icache_ctrl_hw2reg_clear_counters_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } cluster_icache_ctrl_hw2reg_counters_mreg_t;

  // Register -> HW type
  typedef struct packed {
    cluster_icache_ctrl_reg2hw_enable_reg_t enable; // [2001:2001]
    cluster_icache_ctrl_reg2hw_flush_reg_t flush; // [2000:1999]
    cluster_icache_ctrl_reg2hw_flush_l1_only_reg_t flush_l1_only; // [1998:1997]
    cluster_icache_ctrl_reg2hw_sel_flush_icache_reg_t sel_flush_icache; // [1996:1988]
    cluster_icache_ctrl_reg2hw_clear_counters_reg_t clear_counters; // [1987:1986]
    cluster_icache_ctrl_reg2hw_enable_counters_reg_t enable_counters; // [1985:1985]
    cluster_icache_ctrl_reg2hw_enable_prefetch_reg_t enable_prefetch; // [1984:1984]
    cluster_icache_ctrl_reg2hw_counters_mreg_t [61:0] counters; // [1983:0]
  } cluster_icache_ctrl_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    cluster_icache_ctrl_hw2reg_flush_reg_t flush; // [2056:2056]
    cluster_icache_ctrl_hw2reg_flush_l1_only_reg_t flush_l1_only; // [2055:2055]
    cluster_icache_ctrl_hw2reg_sel_flush_icache_reg_t sel_flush_icache; // [2054:2047]
    cluster_icache_ctrl_hw2reg_clear_counters_reg_t clear_counters; // [2046:2046]
    cluster_icache_ctrl_hw2reg_counters_mreg_t [61:0] counters; // [2045:0]
  } cluster_icache_ctrl_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_ENABLE_OFFSET = 9'h 0;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_FLUSH_OFFSET = 9'h 4;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_FLUSH_L1_ONLY_OFFSET = 9'h 8;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_SEL_FLUSH_ICACHE_OFFSET = 9'h c;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_CLEAR_COUNTERS_OFFSET = 9'h 10;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_ENABLE_COUNTERS_OFFSET = 9'h 14;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_ENABLE_PREFETCH_OFFSET = 9'h 1c;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_0_OFFSET = 9'h 20;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_1_OFFSET = 9'h 24;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_2_OFFSET = 9'h 28;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_3_OFFSET = 9'h 2c;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_4_OFFSET = 9'h 30;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_5_OFFSET = 9'h 34;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_6_OFFSET = 9'h 38;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_7_OFFSET = 9'h 3c;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_8_OFFSET = 9'h 40;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_9_OFFSET = 9'h 44;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_10_OFFSET = 9'h 48;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_11_OFFSET = 9'h 4c;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_12_OFFSET = 9'h 50;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_13_OFFSET = 9'h 54;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_14_OFFSET = 9'h 58;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_15_OFFSET = 9'h 5c;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_16_OFFSET = 9'h 60;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_17_OFFSET = 9'h 64;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_18_OFFSET = 9'h 68;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_19_OFFSET = 9'h 6c;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_20_OFFSET = 9'h 70;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_21_OFFSET = 9'h 74;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_22_OFFSET = 9'h 78;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_23_OFFSET = 9'h 7c;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_24_OFFSET = 9'h 80;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_25_OFFSET = 9'h 84;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_26_OFFSET = 9'h 88;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_27_OFFSET = 9'h 8c;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_28_OFFSET = 9'h 90;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_29_OFFSET = 9'h 94;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_30_OFFSET = 9'h 98;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_31_OFFSET = 9'h 9c;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_32_OFFSET = 9'h a0;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_33_OFFSET = 9'h a4;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_34_OFFSET = 9'h a8;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_35_OFFSET = 9'h ac;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_36_OFFSET = 9'h b0;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_37_OFFSET = 9'h b4;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_38_OFFSET = 9'h b8;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_39_OFFSET = 9'h bc;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_40_OFFSET = 9'h c0;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_41_OFFSET = 9'h c4;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_42_OFFSET = 9'h c8;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_43_OFFSET = 9'h cc;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_44_OFFSET = 9'h d0;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_45_OFFSET = 9'h d4;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_46_OFFSET = 9'h d8;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_47_OFFSET = 9'h dc;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_48_OFFSET = 9'h e0;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_49_OFFSET = 9'h e4;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_50_OFFSET = 9'h e8;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_51_OFFSET = 9'h ec;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_52_OFFSET = 9'h f0;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_53_OFFSET = 9'h f4;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_54_OFFSET = 9'h f8;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_55_OFFSET = 9'h fc;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_56_OFFSET = 9'h 100;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_57_OFFSET = 9'h 104;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_58_OFFSET = 9'h 108;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_59_OFFSET = 9'h 10c;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_60_OFFSET = 9'h 110;
  parameter logic [BlockAw-1:0] CLUSTER_ICACHE_CTRL_COUNTERS_61_OFFSET = 9'h 114;

  // Reset values for hwext registers and their fields
  parameter logic [0:0] CLUSTER_ICACHE_CTRL_FLUSH_RESVAL = 1'h 0;
  parameter logic [0:0] CLUSTER_ICACHE_CTRL_FLUSH_FLUSH_RESVAL = 1'h 0;
  parameter logic [0:0] CLUSTER_ICACHE_CTRL_FLUSH_L1_ONLY_RESVAL = 1'h 0;
  parameter logic [0:0] CLUSTER_ICACHE_CTRL_FLUSH_L1_ONLY_FLUSH_RESVAL = 1'h 0;
  parameter logic [7:0] CLUSTER_ICACHE_CTRL_SEL_FLUSH_ICACHE_RESVAL = 8'h 0;
  parameter logic [7:0] CLUSTER_ICACHE_CTRL_SEL_FLUSH_ICACHE_FLUSH_RESVAL = 8'h 0;
  parameter logic [0:0] CLUSTER_ICACHE_CTRL_CLEAR_COUNTERS_RESVAL = 1'h 0;
  parameter logic [0:0] CLUSTER_ICACHE_CTRL_CLEAR_COUNTERS_CLEAR_RESVAL = 1'h 0;

  // Register index
  typedef enum int {
    CLUSTER_ICACHE_CTRL_ENABLE,
    CLUSTER_ICACHE_CTRL_FLUSH,
    CLUSTER_ICACHE_CTRL_FLUSH_L1_ONLY,
    CLUSTER_ICACHE_CTRL_SEL_FLUSH_ICACHE,
    CLUSTER_ICACHE_CTRL_CLEAR_COUNTERS,
    CLUSTER_ICACHE_CTRL_ENABLE_COUNTERS,
    CLUSTER_ICACHE_CTRL_ENABLE_PREFETCH,
    CLUSTER_ICACHE_CTRL_COUNTERS_0,
    CLUSTER_ICACHE_CTRL_COUNTERS_1,
    CLUSTER_ICACHE_CTRL_COUNTERS_2,
    CLUSTER_ICACHE_CTRL_COUNTERS_3,
    CLUSTER_ICACHE_CTRL_COUNTERS_4,
    CLUSTER_ICACHE_CTRL_COUNTERS_5,
    CLUSTER_ICACHE_CTRL_COUNTERS_6,
    CLUSTER_ICACHE_CTRL_COUNTERS_7,
    CLUSTER_ICACHE_CTRL_COUNTERS_8,
    CLUSTER_ICACHE_CTRL_COUNTERS_9,
    CLUSTER_ICACHE_CTRL_COUNTERS_10,
    CLUSTER_ICACHE_CTRL_COUNTERS_11,
    CLUSTER_ICACHE_CTRL_COUNTERS_12,
    CLUSTER_ICACHE_CTRL_COUNTERS_13,
    CLUSTER_ICACHE_CTRL_COUNTERS_14,
    CLUSTER_ICACHE_CTRL_COUNTERS_15,
    CLUSTER_ICACHE_CTRL_COUNTERS_16,
    CLUSTER_ICACHE_CTRL_COUNTERS_17,
    CLUSTER_ICACHE_CTRL_COUNTERS_18,
    CLUSTER_ICACHE_CTRL_COUNTERS_19,
    CLUSTER_ICACHE_CTRL_COUNTERS_20,
    CLUSTER_ICACHE_CTRL_COUNTERS_21,
    CLUSTER_ICACHE_CTRL_COUNTERS_22,
    CLUSTER_ICACHE_CTRL_COUNTERS_23,
    CLUSTER_ICACHE_CTRL_COUNTERS_24,
    CLUSTER_ICACHE_CTRL_COUNTERS_25,
    CLUSTER_ICACHE_CTRL_COUNTERS_26,
    CLUSTER_ICACHE_CTRL_COUNTERS_27,
    CLUSTER_ICACHE_CTRL_COUNTERS_28,
    CLUSTER_ICACHE_CTRL_COUNTERS_29,
    CLUSTER_ICACHE_CTRL_COUNTERS_30,
    CLUSTER_ICACHE_CTRL_COUNTERS_31,
    CLUSTER_ICACHE_CTRL_COUNTERS_32,
    CLUSTER_ICACHE_CTRL_COUNTERS_33,
    CLUSTER_ICACHE_CTRL_COUNTERS_34,
    CLUSTER_ICACHE_CTRL_COUNTERS_35,
    CLUSTER_ICACHE_CTRL_COUNTERS_36,
    CLUSTER_ICACHE_CTRL_COUNTERS_37,
    CLUSTER_ICACHE_CTRL_COUNTERS_38,
    CLUSTER_ICACHE_CTRL_COUNTERS_39,
    CLUSTER_ICACHE_CTRL_COUNTERS_40,
    CLUSTER_ICACHE_CTRL_COUNTERS_41,
    CLUSTER_ICACHE_CTRL_COUNTERS_42,
    CLUSTER_ICACHE_CTRL_COUNTERS_43,
    CLUSTER_ICACHE_CTRL_COUNTERS_44,
    CLUSTER_ICACHE_CTRL_COUNTERS_45,
    CLUSTER_ICACHE_CTRL_COUNTERS_46,
    CLUSTER_ICACHE_CTRL_COUNTERS_47,
    CLUSTER_ICACHE_CTRL_COUNTERS_48,
    CLUSTER_ICACHE_CTRL_COUNTERS_49,
    CLUSTER_ICACHE_CTRL_COUNTERS_50,
    CLUSTER_ICACHE_CTRL_COUNTERS_51,
    CLUSTER_ICACHE_CTRL_COUNTERS_52,
    CLUSTER_ICACHE_CTRL_COUNTERS_53,
    CLUSTER_ICACHE_CTRL_COUNTERS_54,
    CLUSTER_ICACHE_CTRL_COUNTERS_55,
    CLUSTER_ICACHE_CTRL_COUNTERS_56,
    CLUSTER_ICACHE_CTRL_COUNTERS_57,
    CLUSTER_ICACHE_CTRL_COUNTERS_58,
    CLUSTER_ICACHE_CTRL_COUNTERS_59,
    CLUSTER_ICACHE_CTRL_COUNTERS_60,
    CLUSTER_ICACHE_CTRL_COUNTERS_61
  } cluster_icache_ctrl_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] CLUSTER_ICACHE_CTRL_PERMIT [69] = '{
    4'b 0001, // index[ 0] CLUSTER_ICACHE_CTRL_ENABLE
    4'b 0001, // index[ 1] CLUSTER_ICACHE_CTRL_FLUSH
    4'b 0001, // index[ 2] CLUSTER_ICACHE_CTRL_FLUSH_L1_ONLY
    4'b 0001, // index[ 3] CLUSTER_ICACHE_CTRL_SEL_FLUSH_ICACHE
    4'b 0001, // index[ 4] CLUSTER_ICACHE_CTRL_CLEAR_COUNTERS
    4'b 0001, // index[ 5] CLUSTER_ICACHE_CTRL_ENABLE_COUNTERS
    4'b 0001, // index[ 6] CLUSTER_ICACHE_CTRL_ENABLE_PREFETCH
    4'b 1111, // index[ 7] CLUSTER_ICACHE_CTRL_COUNTERS_0
    4'b 1111, // index[ 8] CLUSTER_ICACHE_CTRL_COUNTERS_1
    4'b 1111, // index[ 9] CLUSTER_ICACHE_CTRL_COUNTERS_2
    4'b 1111, // index[10] CLUSTER_ICACHE_CTRL_COUNTERS_3
    4'b 1111, // index[11] CLUSTER_ICACHE_CTRL_COUNTERS_4
    4'b 1111, // index[12] CLUSTER_ICACHE_CTRL_COUNTERS_5
    4'b 1111, // index[13] CLUSTER_ICACHE_CTRL_COUNTERS_6
    4'b 1111, // index[14] CLUSTER_ICACHE_CTRL_COUNTERS_7
    4'b 1111, // index[15] CLUSTER_ICACHE_CTRL_COUNTERS_8
    4'b 1111, // index[16] CLUSTER_ICACHE_CTRL_COUNTERS_9
    4'b 1111, // index[17] CLUSTER_ICACHE_CTRL_COUNTERS_10
    4'b 1111, // index[18] CLUSTER_ICACHE_CTRL_COUNTERS_11
    4'b 1111, // index[19] CLUSTER_ICACHE_CTRL_COUNTERS_12
    4'b 1111, // index[20] CLUSTER_ICACHE_CTRL_COUNTERS_13
    4'b 1111, // index[21] CLUSTER_ICACHE_CTRL_COUNTERS_14
    4'b 1111, // index[22] CLUSTER_ICACHE_CTRL_COUNTERS_15
    4'b 1111, // index[23] CLUSTER_ICACHE_CTRL_COUNTERS_16
    4'b 1111, // index[24] CLUSTER_ICACHE_CTRL_COUNTERS_17
    4'b 1111, // index[25] CLUSTER_ICACHE_CTRL_COUNTERS_18
    4'b 1111, // index[26] CLUSTER_ICACHE_CTRL_COUNTERS_19
    4'b 1111, // index[27] CLUSTER_ICACHE_CTRL_COUNTERS_20
    4'b 1111, // index[28] CLUSTER_ICACHE_CTRL_COUNTERS_21
    4'b 1111, // index[29] CLUSTER_ICACHE_CTRL_COUNTERS_22
    4'b 1111, // index[30] CLUSTER_ICACHE_CTRL_COUNTERS_23
    4'b 1111, // index[31] CLUSTER_ICACHE_CTRL_COUNTERS_24
    4'b 1111, // index[32] CLUSTER_ICACHE_CTRL_COUNTERS_25
    4'b 1111, // index[33] CLUSTER_ICACHE_CTRL_COUNTERS_26
    4'b 1111, // index[34] CLUSTER_ICACHE_CTRL_COUNTERS_27
    4'b 1111, // index[35] CLUSTER_ICACHE_CTRL_COUNTERS_28
    4'b 1111, // index[36] CLUSTER_ICACHE_CTRL_COUNTERS_29
    4'b 1111, // index[37] CLUSTER_ICACHE_CTRL_COUNTERS_30
    4'b 1111, // index[38] CLUSTER_ICACHE_CTRL_COUNTERS_31
    4'b 1111, // index[39] CLUSTER_ICACHE_CTRL_COUNTERS_32
    4'b 1111, // index[40] CLUSTER_ICACHE_CTRL_COUNTERS_33
    4'b 1111, // index[41] CLUSTER_ICACHE_CTRL_COUNTERS_34
    4'b 1111, // index[42] CLUSTER_ICACHE_CTRL_COUNTERS_35
    4'b 1111, // index[43] CLUSTER_ICACHE_CTRL_COUNTERS_36
    4'b 1111, // index[44] CLUSTER_ICACHE_CTRL_COUNTERS_37
    4'b 1111, // index[45] CLUSTER_ICACHE_CTRL_COUNTERS_38
    4'b 1111, // index[46] CLUSTER_ICACHE_CTRL_COUNTERS_39
    4'b 1111, // index[47] CLUSTER_ICACHE_CTRL_COUNTERS_40
    4'b 1111, // index[48] CLUSTER_ICACHE_CTRL_COUNTERS_41
    4'b 1111, // index[49] CLUSTER_ICACHE_CTRL_COUNTERS_42
    4'b 1111, // index[50] CLUSTER_ICACHE_CTRL_COUNTERS_43
    4'b 1111, // index[51] CLUSTER_ICACHE_CTRL_COUNTERS_44
    4'b 1111, // index[52] CLUSTER_ICACHE_CTRL_COUNTERS_45
    4'b 1111, // index[53] CLUSTER_ICACHE_CTRL_COUNTERS_46
    4'b 1111, // index[54] CLUSTER_ICACHE_CTRL_COUNTERS_47
    4'b 1111, // index[55] CLUSTER_ICACHE_CTRL_COUNTERS_48
    4'b 1111, // index[56] CLUSTER_ICACHE_CTRL_COUNTERS_49
    4'b 1111, // index[57] CLUSTER_ICACHE_CTRL_COUNTERS_50
    4'b 1111, // index[58] CLUSTER_ICACHE_CTRL_COUNTERS_51
    4'b 1111, // index[59] CLUSTER_ICACHE_CTRL_COUNTERS_52
    4'b 1111, // index[60] CLUSTER_ICACHE_CTRL_COUNTERS_53
    4'b 1111, // index[61] CLUSTER_ICACHE_CTRL_COUNTERS_54
    4'b 1111, // index[62] CLUSTER_ICACHE_CTRL_COUNTERS_55
    4'b 1111, // index[63] CLUSTER_ICACHE_CTRL_COUNTERS_56
    4'b 1111, // index[64] CLUSTER_ICACHE_CTRL_COUNTERS_57
    4'b 1111, // index[65] CLUSTER_ICACHE_CTRL_COUNTERS_58
    4'b 1111, // index[66] CLUSTER_ICACHE_CTRL_COUNTERS_59
    4'b 1111, // index[67] CLUSTER_ICACHE_CTRL_COUNTERS_60
    4'b 1111  // index[68] CLUSTER_ICACHE_CTRL_COUNTERS_61
  };

endpackage

